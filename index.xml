<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edgar Cutar Junior</title>
    <link>https://edgarcutar.github.io/</link>
      <atom:link href="https://edgarcutar.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Edgar Cutar Junior</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 13 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://edgarcutar.github.io/img/edgar.jpg</url>
      <title>Edgar Cutar Junior</title>
      <link>https://edgarcutar.github.io/</link>
    </image>
    
    <item>
      <title>Vida e (principalmente) morte dos Imperadores Romanos</title>
      <link>https://edgarcutar.github.io/post/2019-08-13-roma/roma/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://edgarcutar.github.io/post/2019-08-13-roma/roma/</guid>
      <description>


&lt;p&gt;A &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;Tidy Tuesday&lt;/a&gt; dessa semana trás uma base de dados com a vida e morte dos imperadores romanos. Vamos começar importando os dados e usando &lt;code&gt;glimpse&lt;/code&gt; para dar aquela olhadela em como eles estão estruturados. Para manipulação desse database com maior facilidade, vamos usar o pacote &lt;code&gt;lubridate&lt;/code&gt;, &lt;a href=&#34;https://lubridate.tidyverse.org/&#34;&gt;criado para lidar com tempo e datas&lt;/a&gt;, o que nunca é uma tarefa trivial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(tidyverse, janitor, lubridate, extrafont)

#font_import() #Necessário rodar essa linha uma vez na vida para importar as fontes de seu computador para o R
loadfonts(device = &amp;quot;win&amp;quot;)

imperadores &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv&amp;quot;) %&amp;gt;% 
  mutate(birth = case_when(str_detect(notes, 
                                      &amp;quot;BCE&amp;quot;) ~ birth - years(2*year(birth)),
                           TRUE ~ birth),
         reign_start = case_when(
           str_detect(notes, 
                      &amp;quot;reign.start are BCE&amp;quot;) ~ reign_start - years(2*year(reign_start)),
           TRUE ~ reign_start),
         age_death = lubridate::time_length(lubridate::interval(start = birth,
                                                                end = death),
                                            unit = &amp;quot;year&amp;quot;),
         reign_duration = lubridate::time_length(lubridate::interval(start = reign_start,
                                                                     end = reign_end),
                                                 unit = &amp;quot;year&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Criei uma coluna com a idade da morte e duração do reino de cada imperador. Como alguns deles (dois, pra ser preciso) nasceram antes e morreram depois do ano 0, usei &lt;code&gt;case_when()&lt;/code&gt; pra corrigir a conta da idade pra esses casos. Note o uso das funções &lt;code&gt;time_length()&lt;/code&gt; e &lt;code&gt;interval()&lt;/code&gt; do pacote &lt;code&gt;lubridate&lt;/code&gt; para extrair o valor (numérico) do intervalo em anos entre duas datas.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;imperadores %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 68
## Variables: 18
## $ index          &amp;lt;dbl&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ...
## $ name           &amp;lt;chr&amp;gt; &amp;quot;Augustus&amp;quot;, &amp;quot;Tiberius&amp;quot;, &amp;quot;Caligula&amp;quot;, &amp;quot;Claudius&amp;quot;,...
## $ name_full      &amp;lt;chr&amp;gt; &amp;quot;IMPERATOR CAESAR DIVI FILIVS AVGVSTVS&amp;quot;, &amp;quot;TIBER...
## $ birth          &amp;lt;date&amp;gt; -062-09-23, -041-11-16, 0012-08-31, -009-08-01...
## $ death          &amp;lt;date&amp;gt; 0014-08-19, 0037-03-16, 0041-01-24, 0054-10-13...
## $ birth_cty      &amp;lt;chr&amp;gt; &amp;quot;Rome&amp;quot;, &amp;quot;Rome&amp;quot;, &amp;quot;Antitum&amp;quot;, &amp;quot;Lugdunum&amp;quot;, &amp;quot;Antitum...
## $ birth_prv      &amp;lt;chr&amp;gt; &amp;quot;Italia&amp;quot;, &amp;quot;Italia&amp;quot;, &amp;quot;Italia&amp;quot;, &amp;quot;Gallia Lugdunens...
## $ rise           &amp;lt;chr&amp;gt; &amp;quot;Birthright&amp;quot;, &amp;quot;Birthright&amp;quot;, &amp;quot;Birthright&amp;quot;, &amp;quot;Birt...
## $ reign_start    &amp;lt;date&amp;gt; -026-01-16, 0014-09-18, 0037-03-18, 0041-01-25...
## $ reign_end      &amp;lt;date&amp;gt; 0014-08-19, 0037-03-16, 0041-01-24, 0054-10-13...
## $ cause          &amp;lt;chr&amp;gt; &amp;quot;Assassination&amp;quot;, &amp;quot;Assassination&amp;quot;, &amp;quot;Assassinatio...
## $ killer         &amp;lt;chr&amp;gt; &amp;quot;Wife&amp;quot;, &amp;quot;Other Emperor&amp;quot;, &amp;quot;Senate&amp;quot;, &amp;quot;Wife&amp;quot;, &amp;quot;Sen...
## $ dynasty        &amp;lt;chr&amp;gt; &amp;quot;Julio-Claudian&amp;quot;, &amp;quot;Julio-Claudian&amp;quot;, &amp;quot;Julio-Clau...
## $ era            &amp;lt;chr&amp;gt; &amp;quot;Principate&amp;quot;, &amp;quot;Principate&amp;quot;, &amp;quot;Principate&amp;quot;, &amp;quot;Prin...
## $ notes          &amp;lt;chr&amp;gt; &amp;quot;birth, reign.start are BCE. Assign negative fo...
## $ verif_who      &amp;lt;chr&amp;gt; &amp;quot;Reddit user zonination&amp;quot;, &amp;quot;Reddit user zoninati...
## $ age_death      &amp;lt;dbl&amp;gt; 75.90411, 77.32877, 28.40000, 63.20000, 30.4836...
## $ reign_duration &amp;lt;dbl&amp;gt; 40.5890411, 22.4904110, 3.8547945, 13.7150685, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A primeira coisa que eu gostaria de ver é uma distribuição das causas de morte dos imperadores. Tenho impressão que não era um trabalho fácil. A função &lt;code&gt;fct_reorder()&lt;/code&gt;, do pacote &lt;code&gt;forcats&lt;/code&gt;, &lt;a href=&#34;https://forcats.tidyverse.org/&#34;&gt;pacote feito para manipulação de fatores&lt;/a&gt;, nos ajuda a deixar os fatores na ordem decrescente que queremos para gráfico.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resumo_causas &amp;lt;- imperadores %&amp;gt;%
  group_by(cause) %&amp;gt;% 
  summarise(contar = n()) %&amp;gt;% 
  mutate(cause = forcats::fct_reorder(cause, -contar)) #mantendo a ordem decrescente

resumo_causas %&amp;gt;% 
  ggplot(aes(x = cause, y = contar/sum(contar))) +
  geom_col() +
  geom_text(aes(label = scales::percent(contar/sum(contar), accuracy = 1)),
            color = &amp;quot;white&amp;quot;, fontface  = &amp;quot;bold&amp;quot;, vjust = 1) +
  scale_y_continuous(&amp;quot;% de Mortes&amp;quot;,
                     breaks = 0.05 * 0:8,
                     labels = scales::percent(0.05 * 0:8, accuracy = 1)) +
  labs(x = NULL,
       title = &amp;quot;Causas de Morte dos Imperadores Romanos&amp;quot;,
       caption = &amp;quot;Fonte: Tidy Tuesday - Elaborado por Edgar Cutar Junior&amp;quot;) +
  theme_bw() +
  theme(text = element_text(family = &amp;quot;RomanT&amp;quot;),
        axis.text.x = element_text(angle = -5, vjust = -0.5)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-13-roma/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Realmente não era uma vida tranquila.&lt;/p&gt;
&lt;p&gt;Agora, para unir as mortes violentas em um grupo só, podemos usar &lt;code&gt;fct_collapse()&lt;/code&gt;, também do pacote &lt;code&gt;forcats&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;resumo_coll &amp;lt;- resumo_causas  %&amp;gt;% 
  mutate(cause2 = fct_collapse(cause, 
                               mortes_violentas = c(&amp;quot;Assassination&amp;quot;, &amp;quot;Execution&amp;quot;, 
                                                    &amp;quot;Died in Battle&amp;quot;, &amp;quot;Suicide&amp;quot;,
                                                    &amp;quot;Captivity&amp;quot;),
                               causas_naturais = c(&amp;quot;Natural Causes&amp;quot;),
                               outros = &amp;quot;Unknown&amp;quot;))

resumo_coll %&amp;gt;% 
  ggplot(aes(x = cause2, y = contar/sum(contar))) +
  geom_col(aes(fill = cause)) +
  scale_y_continuous(&amp;quot;% de Mortes&amp;quot;,
                     breaks = 0.05*0:16,
                     labels = scales::percent(0.05*0:16)) +
  labs(x = NULL,
       fill = NULL, 
       title = &amp;quot;Causas de Morte dos Imperadores Romanos&amp;quot;,
       caption = &amp;quot;Fonte: Tidy Tuesday - Elaborado por Edgar Cutar Junior&amp;quot;) +
  scale_fill_viridis_d() +
  scale_x_discrete(labels = c(&amp;quot;Mortes Violentas&amp;quot;, &amp;quot;Causas Naturais&amp;quot;, &amp;quot;Outros&amp;quot;)) +
  theme_bw() +
  theme(text = element_text(family = &amp;quot;RomanT&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-13-roma/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pelo menos 65% dos imperadores romanos morreram violentamente. Isso me deixa curioso para saber quantos golpes de Estado ocorreram em Roma e com qual frequência eles aconteceram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;golpes &amp;lt;- imperadores %&amp;gt;% 
  filter(rise == &amp;quot;Seized Power&amp;quot;) %&amp;gt;% 
  mutate(imperadores_entre_golpes = ifelse(is.na(lag(index)),
                                           index,
                                           index - lag(index)),
         anos_entre_golpes = time_length(interval(start = lag(reign_start),
                                                  end = reign_start),
                                         unit = &amp;quot;year&amp;quot;),
         anos_entre_golpes = ifelse(!is.na(anos_entre_golpes), #corrigindo primeiro período
                                    anos_entre_golpes,
                                    time_length(interval(start = imperadores$reign_start[1],
                                                         end = reign_start),
                                                unit = &amp;quot;year&amp;quot;)))

golpes %&amp;gt;% 
  summarise(max_imper = max(imperadores_entre_golpes),
            med_imper = mean(imperadores_entre_golpes),
            min_imper = min(imperadores_entre_golpes),
            max_anos = max(anos_entre_golpes),
            med_anos = mean(anos_entre_golpes),
            min_anos = min(anos_entre_golpes)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   max_imper med_imper min_imper max_anos med_anos min_anos
##       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1        12       6.1         1     123.     37.6    0.679&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas pílulas saídas desse resumo:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Na média, houve um golpe a cada 37 anos. O maior período sem golpe foi após o golpe de Vespasiano, em 79 DC. Foram 123 anos sem golpes de estado. De origem humilde, Vespasiano ganhou poder no exército após o Suicídio de Nero em 68 DC. Nas convulsões políticas que tomaram Roma nessa época, ele foi aclamado Imperador pelo exército e marchou contra Roma e Vitélio, que também havia subido ao poder pela força, ainda naquele ano.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;69 DC ficou conhecido como “O ano dos 4 imperadores”. Foram Galba, Otho, Vitélio e Vespasiano, que se consolidou no poder, onde ficou até falecer, 10 anos depois, como o 4º imperador mais velho a falecer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vitélio consagra seu império o período mais curto entre golpes, tomou o poder em abril e foi deposto (e executado) em dezembro.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por fim, vamos usar &lt;code&gt;geom_segment()&lt;/code&gt; para fazer um gráfico mostrando todos os imperadores de Roma, com suas vidas, mortes e reinados.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;imperadores %&amp;gt;% 
  mutate(cause2 = fct_collapse(cause, 
                               `Mortes Violentas` = c(&amp;quot;Assassination&amp;quot;, &amp;quot;Execution&amp;quot;, 
                                                    &amp;quot;Died in Battle&amp;quot;, &amp;quot;Suicide&amp;quot;,
                                                    &amp;quot;Captivity&amp;quot;),
                               `Causas Naturais` = c(&amp;quot;Natural Causes&amp;quot;),
                               `Outros` = &amp;quot;Unknown&amp;quot;),
         name = fct_reorder(name, -index)) %&amp;gt;% 
  ggplot(aes(x = reign_start,
             y = name,
             color = cause2)) +
  geom_segment(aes(x = birth, 
                   xend = reign_end, 
                   yend = ..y..), 
               size = 1.5, 
               lineend = &amp;quot;round&amp;quot;) +
  geom_point(aes(x = reign_start, fill = &amp;quot;Reinado&amp;quot;), color = &amp;quot;red&amp;quot;) +
  geom_segment(aes(x = reign_start, 
                   xend = reign_end, 
                   yend = ..y..,
                   color = &amp;quot;Reinado&amp;quot;), 
               color = &amp;quot;red&amp;quot;,
               size = 1, lineend = &amp;quot;round&amp;quot;) +
  scale_color_viridis_d() +
  scale_x_date(labels = function(x) str_glue(&amp;quot;{year(x)} DC&amp;quot;)) +
  labs(title = &amp;quot;Nascimento, Reinado e Morte\ndos Imperadores Romanos&amp;quot;,
       color = &amp;quot;Causa Mortis&amp;quot;,
       caption = &amp;quot;Fonte: Tidy Tuesday - Elaborado por Edgar Cutar Junior&amp;quot;,
       fill = NULL,
       x = NULL,
       y = NULL) +
  theme_bw() +
  theme(text = element_text(family = &amp;quot;RomanT&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-13-roma/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O que mais impressiona é que depois da morte de Septimus Severus, em 211, houve 13 imperadores seguidos mortos de forma violenta. Depois dos 13, Hostilian assumiu por apenas 105 dias antes de morrer de causas naturais. Depois dele, mais 4 imperadores morreram de causas violentas.&lt;/p&gt;
&lt;p&gt;Pra quem sentiu falta de Julio César, aquele do “Até tu, Brutus?”, ele foi um dos últimos ícones da República Romana, e um dos que ajudou a formar o império, que começou 18 anos após sua morte.&lt;/p&gt;
&lt;p&gt;Tem alguma crítica, sugestão, ou quer bater um papo? Me chama no &lt;a href=&#34;http://twitter.com/edgar_cutar&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lidando com dados longitudinais e pareamento de dados</title>
      <link>https://edgarcutar.github.io/post/2019-08-11-longitudinal/longitudinal/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://edgarcutar.github.io/post/2019-08-11-longitudinal/longitudinal/</guid>
      <description>


&lt;p&gt;Quando falamos em bases de dados, existem basicamente dois grandes tipos de dados: &lt;strong&gt;Transversais&lt;/strong&gt; e &lt;strong&gt;Longitudinais&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Dados transversais (também chamados de &lt;em&gt;cross-section&lt;/em&gt;) são o tipo de dado mais comum encontrado em qualquer área de estudo. Nesse tipo de base, existe uma observação para cada “indivíduo”. Como uma fotografia, ou um recorte, da população a ser estudada, um dado transversal tenta captar as variações que ocorrem na população através de uma imagem estática.&lt;/p&gt;
&lt;p&gt;Um grande exemplo de dado transversal é a base de dados &lt;code&gt;starwars&lt;/code&gt; do pacote &lt;code&gt;dplyr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Carregando pacotes exigidos: pacman&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, datasets)

dplyr::starwars&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 87 x 13
##    name  height  mass hair_color skin_color eye_color birth_year gender
##    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; 
##  1 Luke~    172    77 blond      fair       blue            19   male  
##  2 C-3PO    167    75 &amp;lt;NA&amp;gt;       gold       yellow         112   &amp;lt;NA&amp;gt;  
##  3 R2-D2     96    32 &amp;lt;NA&amp;gt;       white, bl~ red             33   &amp;lt;NA&amp;gt;  
##  4 Dart~    202   136 none       white      yellow          41.9 male  
##  5 Leia~    150    49 brown      light      brown           19   female
##  6 Owen~    178   120 brown, gr~ light      blue            52   male  
##  7 Beru~    165    75 brown      light      blue            47   female
##  8 R5-D4     97    32 &amp;lt;NA&amp;gt;       white, red red             NA   &amp;lt;NA&amp;gt;  
##  9 Bigg~    183    84 black      light      brown           24   male  
## 10 Obi-~    182    77 auburn, w~ fair       blue-gray       57   male  
## # ... with 77 more rows, and 5 more variables: homeworld &amp;lt;chr&amp;gt;,
## #   species &amp;lt;chr&amp;gt;, films &amp;lt;list&amp;gt;, vehicles &amp;lt;list&amp;gt;, starships &amp;lt;list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa base mostra uma série de dados (altura, peso, cor de cabelo, pele e olhos) de diversos personagens da franquia Star Wars. Cada personagem aparece apenas uma vez (com exceção de Anakin Skywalker/Darth Vader, que aparece como dois personagens, mas divago).&lt;/p&gt;
&lt;p&gt;O outro tipo de dado é o “longitudinal”. Nesse tipo de estudo, os dados são coletados repetidamente para ao mesmo indivíduo. Olhando para a base do Star Wars, se tivessemos dados da vida dos personagens, ela se tornaria longitudinal. Por exemplo, teríamos dados do Luke Skywalker com seu peso e altura em diversas fases da sua vida.&lt;/p&gt;
&lt;p&gt;Uma base longitudinal, como você deve imaginar, é muito mais complicada de se obter, mas permite análises também mais complexas. É possível determinar tipos de crescimento, entender comportamentos antes/depois de certos acontecimentos (resposta a um remédio, sobrevida depois de uma cirurgia, medições de variáveis climáticas ao redor do globo). Conseguir uma base longitudinal leva tempo e custa caro, mas existem determinadas aplicações que necessitam desse tipo de dado.&lt;/p&gt;
&lt;p&gt;Dentro da área florestal, existe um uso específico que exige dados longitudinais: os modelos de crescimento florestal. Para que seja possível entender os padrões de crescimento de um povoamento florestal, é preciso que sejam coletadas amostras de um determinado conjunto de árvores repetidamente ao longo do tempo.&lt;/p&gt;
&lt;p&gt;Dessa forma, ficamos com uma base de dados como a abaixo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parcela &amp;lt;- read_csv2(&amp;quot;https://raw.githubusercontent.com/edgarcutar/example_data/master/parcelas.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using &amp;#39;,&amp;#39; as decimal and &amp;#39;.&amp;#39; as grouping mark. Use read_delim() for more control.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   parcela_amostral = col_character(),
##   idade = col_double(),
##   volume = col_double(),
##   area_basal = col_double(),
##   altura_dominante = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parcela&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 5
##   parcela_amostral idade volume area_basal altura_dominante
##   &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1 A                    2   53.7        9.9             12.9
## 2 A                    3  131         17.4             19.4
## 3 A                    4  220.        23.2             24.1
## 4 B                    2   93.8       14.4             15.8
## 5 B                    3  163.        18.7             20.9
## 6 B                    4  217.        21.1             25.4
## 7 C                    2   59.5       10.4             14.9
## 8 C                    3  122.        15.3             19.8
## 9 C                    4  175.        18.2             24.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse caso, existem medições da mesma parcela amostral ao longo de 3 anos. Com esse tipo de dado é possível construir um modelo de crescimento e produção para aquele tipo de floresta.&lt;/p&gt;
&lt;p&gt;Para que seja possível construir um modelo desse tipo, existe um passo extra necessário, é necessário organizar &lt;strong&gt;pares de observações&lt;/strong&gt;, em linha, de forma a parear estas bases de forma a conseguir ajustar um modelo do tipo &lt;span class=&#34;math inline&#34;&gt;\(Vol_2 \sim 1 + I_2 + Vol_1 + I_1\)&lt;/span&gt;, ou seja, um Volume no tempo 2 em função da idade no tempo 2, volume no tempo 1 e idade no tempo 1.&lt;/p&gt;
&lt;p&gt;Um exemplo desse tipo de modelo é o de Lundqvist-Korf, em que uma de suas equações diferenciais pode ser escrita do seguinte modo:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(Vol_2 = a*(Vol_1/a)^(I_1/I_2)^c\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Para que seja possível ter uma base pronta para esse ajuste, é necessário que seja feito o pareamento dos dados, ou seja, cada idade deve ser combinada às demais. É basicamente uma combinatória com algumas regras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devem ser pareadas apenas as mesmas medições das parcelas;&lt;/li&gt;
&lt;li&gt;A idade 2 deve ser maior que a idade 1;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para fazer essa combinatória, elaborei uma função de pareamento, apresentada abaixo e aplicada aos dados do nosso exemplo. Apesar de ter pensado ela para dados florestais, a mesma pode ser usada com poucas modificações para quaisquer origem de dados.&lt;/p&gt;
&lt;p&gt;A função terá 3 argumentos:
- &lt;strong&gt;table&lt;/strong&gt;: o data frame a ser pareado
- &lt;strong&gt;id&lt;/strong&gt;: o identificador único de sua parcela amostral
- &lt;strong&gt;idade&lt;/strong&gt;: sua variável indicando o tempo de medição. Pode ser idade, ano, mês… a coluna que indica QUANDO a medição foi feita, em relação ao &lt;span class=&#34;math inline&#34;&gt;\(t_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(dplyr)

pareamento &amp;lt;- function(table, id, idade){
  
  expand.grid.df &amp;lt;- function(...) Reduce(function(...) merge(..., by=NULL), list(...)) #Cria Função combinatória
  
  id_ &amp;lt;- sym(ensym(id)) #transforma inputs em strings e depois em objetos
  idade1 &amp;lt;- sym(str_c(ensym(idade), &amp;quot;.x&amp;quot;))
  idade2 &amp;lt;- sym(str_c(ensym(idade), &amp;quot;.y&amp;quot;))
  
  par_unique &amp;lt;- unique(table %&amp;gt;%
                         pull(!!id_))
  
  output &amp;lt;- vector(&amp;quot;list&amp;quot;, length(par_unique)) # cria output de listas vazio
  
  p &amp;lt;- progress_estimated(length(par_unique)) # Cria barra de progresso
  
  for (i in seq_along(par_unique)) {
    
    a &amp;lt;- table %&amp;gt;% filter(!!id_ == par_unique[i])  #filtra parcela i
    b &amp;lt;- expand.grid.df(a,a) #combinatória de parcela amostral
    c &amp;lt;- b %&amp;gt;% filter(!!idade2 &amp;gt; !!idade1) #separa i2 &amp;gt; i1
    output[[i]] &amp;lt;- c # cria lista i com output 
    
    p$tick()$print() #print barra de progresso
  }
  bind_rows(output) #combina output em um único data frame
}

#Aplicando a função a nosso exemplo
parcela %&amp;gt;% 
  pareamento(id = parcela_amostral, idade = idade)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   parcela_amostral.x idade.x volume.x area_basal.x altura_dominante.x
## 1                  A       2     53.7          9.9               12.9
## 2                  A       2     53.7          9.9               12.9
## 3                  A       3    131.0         17.4               19.4
## 4                  B       2     93.8         14.4               15.8
## 5                  B       2     93.8         14.4               15.8
## 6                  B       3    163.1         18.7               20.9
## 7                  C       2     59.5         10.4               14.9
## 8                  C       2     59.5         10.4               14.9
## 9                  C       3    121.9         15.3               19.8
##   parcela_amostral.y idade.y volume.y area_basal.y altura_dominante.y
## 1                  A       3    131.0         17.4               19.4
## 2                  A       4    219.6         23.2               24.1
## 3                  A       4    219.6         23.2               24.1
## 4                  B       3    163.1         18.7               20.9
## 5                  B       4    217.3         21.1               25.4
## 6                  B       4    217.3         21.1               25.4
## 7                  C       3    121.9         15.3               19.8
## 8                  C       4    174.8         18.2               24.4
## 9                  C       4    174.8         18.2               24.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pode parecer um processo trivial pra uma função tão longa, mas já vi muita gente quebrando cabeça e fazendo macros enormes pra chegar nesse resultado.&lt;/p&gt;
&lt;p&gt;Falei alguma groselha ou tem algum jeito menos maluco de fazer isso? Me avise no &lt;a href=&#34;http://twitter.com/edgar_cutar&#34;&gt;twitter&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Abraços!&lt;/p&gt;
&lt;p&gt;EDIT: Seguindo a dica do amigo &lt;a href=&#34;https://italocegatta.github.io&#34;&gt;Ítalo Cegatta&lt;/a&gt;, substituí as funções &lt;code&gt;deparse(substitute(args))&lt;/code&gt; pela função &lt;code&gt;ensym()&lt;/code&gt;, que é condizente com a &lt;code&gt;tidyeval&lt;/code&gt;, a &lt;em&gt;tidy evaluation&lt;/em&gt; proposta por Hadley Wickham e Lionel Henry, que vocês podem conferir melhor &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;aqui&lt;/a&gt; e &lt;a href=&#34;https://adv-r.hadley.nz/quasiquotation.html&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Uma Análise (Quase) Estatística De Bob Ross</title>
      <link>https://edgarcutar.github.io/post/2019-08-06-bob/</link>
      <pubDate>Tue, 06 Aug 2019 08:54:32 -0300</pubDate>
      <guid>https://edgarcutar.github.io/post/2019-08-06-bob/</guid>
      <description>


&lt;p&gt;A &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;Tidy Tuesday&lt;/a&gt; dessa semana traz um dataset sobre &lt;a href=&#34;https://pt.wikipedia.org/wiki/Bob_Ross&#34;&gt;Bob Ross&lt;/a&gt;. Bob foi um pintor americano conhecido pelo programa &lt;a href=&#34;https://pt.wikipedia.org/wiki/The_Joy_of_Painting&#34;&gt;&lt;em&gt;The Joy of Painting&lt;/em&gt;&lt;/a&gt;, que foi ao ar nos anos 80 e 90 nos EUA, Canadá e Europa. No seu programa, ele mostrava técnicas de pintura a óleo enquanto completava uma pintura toda semana.&lt;/p&gt;
&lt;p&gt;O dataset sobre o trabalho de Bob Ross foi fornecido para a #tidytuesday pelo site &lt;a href=&#34;https://fivethirtyeight.com/&#34;&gt;538&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(tidyverse, janitor)

bob_ross &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-06/bob-ross.csv&amp;quot;) %&amp;gt;% 
  clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em primeiro lugar, para ver o que temos nos dados, vamos usar a função &lt;code&gt;head&lt;/code&gt;, que retorna as primeiras linhas da planilha:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bob_ross %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 69
##   episode title apple_frame aurora_borealis  barn beach  boat bridge
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 S01E01  &amp;quot;\&amp;quot;A~           0               0     0     0     0      0
## 2 S01E02  &amp;quot;\&amp;quot;M~           0               0     0     0     0      0
## 3 S01E03  &amp;quot;\&amp;quot;E~           0               0     0     0     0      0
## 4 S01E04  &amp;quot;\&amp;quot;W~           0               0     0     0     0      0
## 5 S01E05  &amp;quot;\&amp;quot;Q~           0               0     0     0     0      0
## 6 S01E06  &amp;quot;\&amp;quot;W~           0               0     0     0     0      0
## # ... with 61 more variables: building &amp;lt;dbl&amp;gt;, bushes &amp;lt;dbl&amp;gt;, cabin &amp;lt;dbl&amp;gt;,
## #   cactus &amp;lt;dbl&amp;gt;, circle_frame &amp;lt;dbl&amp;gt;, cirrus &amp;lt;dbl&amp;gt;, cliff &amp;lt;dbl&amp;gt;,
## #   clouds &amp;lt;dbl&amp;gt;, conifer &amp;lt;dbl&amp;gt;, cumulus &amp;lt;dbl&amp;gt;, deciduous &amp;lt;dbl&amp;gt;,
## #   diane_andre &amp;lt;dbl&amp;gt;, dock &amp;lt;dbl&amp;gt;, double_oval_frame &amp;lt;dbl&amp;gt;, farm &amp;lt;dbl&amp;gt;,
## #   fence &amp;lt;dbl&amp;gt;, fire &amp;lt;dbl&amp;gt;, florida_frame &amp;lt;dbl&amp;gt;, flowers &amp;lt;dbl&amp;gt;,
## #   fog &amp;lt;dbl&amp;gt;, framed &amp;lt;dbl&amp;gt;, grass &amp;lt;dbl&amp;gt;, guest &amp;lt;dbl&amp;gt;,
## #   half_circle_frame &amp;lt;dbl&amp;gt;, half_oval_frame &amp;lt;dbl&amp;gt;, hills &amp;lt;dbl&amp;gt;,
## #   lake &amp;lt;dbl&amp;gt;, lakes &amp;lt;dbl&amp;gt;, lighthouse &amp;lt;dbl&amp;gt;, mill &amp;lt;dbl&amp;gt;, moon &amp;lt;dbl&amp;gt;,
## #   mountain &amp;lt;dbl&amp;gt;, mountains &amp;lt;dbl&amp;gt;, night &amp;lt;dbl&amp;gt;, ocean &amp;lt;dbl&amp;gt;,
## #   oval_frame &amp;lt;dbl&amp;gt;, palm_trees &amp;lt;dbl&amp;gt;, path &amp;lt;dbl&amp;gt;, person &amp;lt;dbl&amp;gt;,
## #   portrait &amp;lt;dbl&amp;gt;, rectangle_3d_frame &amp;lt;dbl&amp;gt;, rectangular_frame &amp;lt;dbl&amp;gt;,
## #   river &amp;lt;dbl&amp;gt;, rocks &amp;lt;dbl&amp;gt;, seashell_frame &amp;lt;dbl&amp;gt;, snow &amp;lt;dbl&amp;gt;,
## #   snowy_mountain &amp;lt;dbl&amp;gt;, split_frame &amp;lt;dbl&amp;gt;, steve_ross &amp;lt;dbl&amp;gt;,
## #   structure &amp;lt;dbl&amp;gt;, sun &amp;lt;dbl&amp;gt;, tomb_frame &amp;lt;dbl&amp;gt;, tree &amp;lt;dbl&amp;gt;, trees &amp;lt;dbl&amp;gt;,
## #   triple_frame &amp;lt;dbl&amp;gt;, waterfall &amp;lt;dbl&amp;gt;, waves &amp;lt;dbl&amp;gt;, windmill &amp;lt;dbl&amp;gt;,
## #   window_frame &amp;lt;dbl&amp;gt;, winter &amp;lt;dbl&amp;gt;, wood_framed &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Temos cada uma das 403 pinturas que Bob Ross fez ao longo dos 11 anos e 31 temporadas de &lt;em&gt;The Joy of Painting&lt;/em&gt;, cada uma delas contendo os diversos elementos presentes em cada pintura: casas, barcos, palmeiras, árvores etc.&lt;/p&gt;
&lt;p&gt;Para organizar um pouco a tabela, vamos usar a função &lt;code&gt;gather&lt;/code&gt;, colocando os diversos elementos em uma única coluna e sua existência ou não como outra coluna. Vamos também separar episódio e temporada em colunas próprias, numéricas, usando algumas funções do pacote &lt;code&gt;stringr&lt;/code&gt; e um pouquinho de &lt;code&gt;regex&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bob_ross_gather &amp;lt;- bob_ross %&amp;gt;% 
  separate(episode, into = c(&amp;quot;season&amp;quot;, &amp;quot;episode&amp;quot;), sep = &amp;quot;E&amp;quot;) %&amp;gt;% 
  mutate(season = str_extract(season, &amp;quot;[:digit:]+&amp;quot;)) %&amp;gt;% 
  mutate_at(vars(season, episode), as.integer) %&amp;gt;% 
  gather(apple_frame:wood_framed, key = element, value = presence) %&amp;gt;% 
  print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 27,001 x 5
##    season episode title                     element     presence
##     &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                     &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
##  1      1       1 &amp;quot;\&amp;quot;A WALK IN THE WOODS\&amp;quot;&amp;quot; apple_frame        0
##  2      1       2 &amp;quot;\&amp;quot;MT. MCKINLEY\&amp;quot;&amp;quot;        apple_frame        0
##  3      1       3 &amp;quot;\&amp;quot;EBONY SUNSET\&amp;quot;&amp;quot;        apple_frame        0
##  4      1       4 &amp;quot;\&amp;quot;WINTER MIST\&amp;quot;&amp;quot;         apple_frame        0
##  5      1       5 &amp;quot;\&amp;quot;QUIET STREAM\&amp;quot;&amp;quot;        apple_frame        0
##  6      1       6 &amp;quot;\&amp;quot;WINTER MOON\&amp;quot;&amp;quot;         apple_frame        0
##  7      1       7 &amp;quot;\&amp;quot;AUTUMN MOUNTAINS\&amp;quot;&amp;quot;    apple_frame        0
##  8      1       8 &amp;quot;\&amp;quot;PEACEFUL VALLEY\&amp;quot;&amp;quot;     apple_frame        0
##  9      1       9 &amp;quot;\&amp;quot;SEASCAPE\&amp;quot;&amp;quot;            apple_frame        0
## 10      1      10 &amp;quot;\&amp;quot;MOUNTAIN LAKE\&amp;quot;&amp;quot;       apple_frame        0
## # ... with 26,991 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora vamos ver quais são os elementos mais presentes nas pinturas e separar os 20 primeiros.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_elements &amp;lt;- bob_ross_gather %&amp;gt;% 
  group_by(element) %&amp;gt;% 
  summarise(presence = sum(presence)) %&amp;gt;% 
  arrange(-presence) %&amp;gt;% 
  top_n(20, presence) %&amp;gt;% 
  mutate(element = factor(element, levels = element)) #transformando em factor para manter a ordem

top_elements %&amp;gt;% 
  ggplot(aes(x = element, y = presence)) + 
  geom_point(size=3) + 
  geom_segment(aes(x = element, 
                   xend = element, 
                   y = 0, 
                   yend = presence)) + 
  labs(x = NULL,
       y = &amp;quot;Nº de Pinturas&amp;quot;,
       title = &amp;quot;Elementos mais presentes nas pinturas de Bob Ross&amp;quot;, 
       caption = &amp;quot;Fonte: Tidy Tuesday (https://github.com/rfordatascience/tidytuesday)&amp;quot;) + 
  coord_flip() +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-06-bob/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Em primeiro lugar, chamam atenção as árvores: 89% de suas pinturas contém ao menos uma árvore, e quase 84% delas possuem mais de uma. Curiosidade: uma vez que Bob pintasse a primeira árvore, ele não pintava a segunda, ele pintava uma “amiga” da primeira. Os dois próximos elementos da lista tratam dos tipos de árvores pintadas, decíduas e coníferas. Para os leigos: árvores que perdem folhas no inverno e pinheiros.&lt;/p&gt;
&lt;p&gt;Essa paisagem de coníferas e decíduas remete ao segundo tema mais constante da obra de Bob Ross, o inverno. Bob Ross ingressou na Força Aérea aos 17 anos (uma coisa que temos em comum). Diferente de mim, no entanto, ele continuou por lá, passando 20 anos na Base Aérea de Eielson, no Alasca. Isso parece ter permeado sua arte, uma vez que pinturas de áreas congeladas parece ter sido um &lt;em&gt;trend&lt;/em&gt; em sua carreira. Montanhas nevadas, neve, inverno, são outros elementos constantes em sua obra.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cold.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Puxando para o meu lado florestal, separei manualmente todas as referências a elementos vegetais nas obras de Bob. Se deixei passar algum, me avisem:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;veggies &amp;lt;- c(&amp;quot;bushes&amp;quot;, &amp;quot;cactus&amp;quot;, &amp;quot;conifer&amp;quot;, &amp;quot;deciduous&amp;quot;, 
             &amp;quot;flowers&amp;quot;, &amp;quot;grass&amp;quot;,&amp;quot;palm_trees&amp;quot;, &amp;quot;tree&amp;quot;, &amp;quot;trees&amp;quot;)

bob_ross_veg &amp;lt;- bob_ross_gather %&amp;gt;%
  filter(element %in% veggies) 

bob_ross_veg %&amp;gt;%
  group_by(element) %&amp;gt;% 
  summarise(presence = sum(presence)) %&amp;gt;% 
  arrange(-presence) %&amp;gt;% 
  mutate(element = factor(element, levels = element))%&amp;gt;% 
  ggplot(aes(x = element, y = presence)) + 
  geom_point(size=3) + 
  geom_segment(aes(x = element, 
                   xend = element, 
                   y = 0, 
                   yend = presence)) + 
  labs(x = NULL,
       y = &amp;quot;Nº de Pinturas&amp;quot;,
       title = &amp;quot;Elementos vegetais mais presentes nas pinturas de Bob Ross&amp;quot;, 
       caption = &amp;quot;Fonte: Tidy Tuesday (https://github.com/rfordatascience/tidytuesday)&amp;quot;) + 
  coord_flip() +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-06-bob/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vamos dar uma olhada se algum desses elementos teve alguma grande alteração ao longo dos anos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bob_ross_veg %&amp;gt;%
  group_by(element, season) %&amp;gt;% 
  summarise(presence = sum(presence)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  ggplot(aes(x = season, y = presence)) + 
  geom_line(aes(color = element), show.legend = FALSE) +  
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = F, color = &amp;quot;lightgray&amp;quot;) +
  labs(x = NULL,
       y = &amp;quot;Nº de Pinturas&amp;quot;,
       title = &amp;quot;Elementos vegetais mais presentes nas pinturas de Bob Ross ao longo do tempo&amp;quot;, 
       caption = &amp;quot;Fonte: Tidy Tuesday (https://github.com/rfordatascience/tidytuesday)&amp;quot;) + 
  facet_wrap(~element) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-08-06-bob/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aparentemente Bob Ross era bem consistente em suas pinturas. Também dá pra perceber a maior presença de plantas de climas mais frios (coníferas, decíduas) comparada à frequência daquelas de climas quentes (palmeiras, cactos). Isso continua nos mostrando como suas pinturas geralmente retratavam paisagens mais frias.&lt;/p&gt;
&lt;p&gt;Dá pra notar uma diminuição do número de arbustos e árvores decíduas e um aumento das coníferas. Bob parece ter ido para climas ainda mais frios conforme o tempo passou!&lt;/p&gt;
&lt;p&gt;Abraços!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mulheres no Parlamento ao redor do mundo</title>
      <link>https://edgarcutar.github.io/post/2019-07-29-mulheres/mulheres-no-parlamento-ao-redor-do-mundo/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://edgarcutar.github.io/post/2019-07-29-mulheres/mulheres-no-parlamento-ao-redor-do-mundo/</guid>
      <description>


&lt;p&gt;Perdido no Twitter há alguns dias, &lt;a href=&#34;https://twitter.com/ilustat/status/1154401034183352321&#34;&gt;trombei&lt;/a&gt; com a base de dados &lt;a href=&#34;https://github.com/saghirb/Women-in-Parliament-Hex-Sticker&#34;&gt;“Women in Parliament”&lt;/a&gt; do &lt;a href=&#34;https://data.worldbank.org/indicator/SG.GEN.PARL.ZS&#34;&gt;World Bank Data&lt;/a&gt;, uma base imensa de dados mantida pelo Banco Mundial. Existe até um pacote para R, o &lt;code&gt;wbstats&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A base que queremos está disponível via &lt;code&gt;wbstats&lt;/code&gt; e tem o código “SG.GEN.PARL.ZS”. Então vamos buscá-la através do pacote, puxando os dados desde 1997 (quando os dados começaram a ser coletados).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Carregando pacotes exigidos: pacman&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(tidyverse, scales,wbstats)

women &amp;lt;- wbstats::wb(indicator = &amp;quot;SG.GEN.PARL.ZS&amp;quot;, 
                     startdate = 1997, 
                     enddate = 2018,
                     country = &amp;quot;countries_only&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos dar uma olhada em como os dados estão estruturados:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;women %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 3,971
## Variables: 7
## $ iso3c       &amp;lt;chr&amp;gt; &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;AFG&amp;quot;, &amp;quot;...
## $ date        &amp;lt;chr&amp;gt; &amp;quot;2018&amp;quot;, &amp;quot;2017&amp;quot;, &amp;quot;2016&amp;quot;, &amp;quot;2015&amp;quot;, &amp;quot;2014&amp;quot;, &amp;quot;2013&amp;quot;, &amp;quot;2...
## $ value       &amp;lt;dbl&amp;gt; 27.7, 27.7, 27.7, 27.7, 27.7, 27.7, 27.7, 27.7, 27...
## $ indicatorID &amp;lt;chr&amp;gt; &amp;quot;SG.GEN.PARL.ZS&amp;quot;, &amp;quot;SG.GEN.PARL.ZS&amp;quot;, &amp;quot;SG.GEN.PARL.Z...
## $ indicator   &amp;lt;chr&amp;gt; &amp;quot;Proportion of seats held by women in national par...
## $ iso2c       &amp;lt;chr&amp;gt; &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;AF&amp;quot;, &amp;quot;A...
## $ country     &amp;lt;chr&amp;gt; &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afghanistan&amp;quot;, &amp;quot;Afgh...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, cada país possui 22 linhas, de 1997 a 2018.&lt;/p&gt;
&lt;p&gt;Em primeiro lugar, eu gostaria de ver como a média mundial está se comportando desde 1997:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;media_mundo &amp;lt;- women %&amp;gt;% 
  group_by(date) %&amp;gt;% 
  summarise(media = mean(value)) 

media_mundo %&amp;gt;% 
  ggplot(aes(x = date, 
             y = media,
             group = 1)) +
  geom_line() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30)) +
  labs(title = &amp;quot;Percentual Médio de Mulheres nos Parlamentos Nacionais ao redor do mundo&amp;quot;,
       y = &amp;quot;%&amp;quot;,
       x = &amp;quot;Ano&amp;quot;,
       caption = &amp;quot;Fonte: Banco Mundial - Elaborado por Edgar Cutar Junior&amp;quot;) +
  ylim(0,25) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-07-29-mulheres/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bom, o resultado não é nada bom mas, pelo lado positivo, a média mais que dobrou em 20 anos.&lt;/p&gt;
&lt;p&gt;Vamos ver a evolução dos mesmos dados usado o pacote &lt;code&gt;ggridges&lt;/code&gt;, de &lt;a href=&#34;https://twitter.com/ClausWilke&#34;&gt;Claus Wilke&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pacman::p_load(ggridges)

women %&amp;gt;% 
  mutate(date = factor(date, levels = 2018:1997)) %&amp;gt;% 
  ggplot(aes(x = value, 
             y = date,
             group = date)) +
  stat_density_ridges(bandwidth = 3, 
                      quantile_lines = TRUE, 
                      quantiles = 2,
                      fill = &amp;quot;red&amp;quot;, 
                      alpha = 0.7) +
  labs(title = &amp;quot;Distribuição de Mulheres nos Parlamentos Nacionais ao redor do mundo&amp;quot;,
       y = NULL,
       x = &amp;quot;%&amp;quot;,
       caption = &amp;quot;Fonte: Banco Mundial - Elaborado por Edgar Cutar Junior&amp;quot;) +
  xlim(0,100) +
  scale_x_continuous(breaks = (0:10)*10) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Scale for &amp;#39;x&amp;#39; is already present. Adding another scale for &amp;#39;x&amp;#39;, which
## will replace the existing scale.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-07-29-mulheres/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nesse segundo gráfico temos um novo panorama, até menos animador. Embora em boa parte do mundo a situação parlamentar tenha evoluído, ainda existe uma boa quantidade de países em que o percentual ainda é muito baixo, abaixo de 10% das cadeiras sendo ocupadas por mulheres.&lt;/p&gt;
&lt;p&gt;Pra finalizar, vamos dar uma olhada na situação do Brasil frente ao resto do mundo. Pra isso, vamos isolar a participação tupininquim das demais.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brasil &amp;lt;- women %&amp;gt;% 
  group_by(date, isbrazil = country == &amp;quot;Brazil&amp;quot;) %&amp;gt;% 
  summarise(media = mean(value))  

brasil %&amp;gt;% 
  ggplot(aes(x = date, 
             y = media,
             group = isbrazil,
             color = isbrazil)) +
  geom_line() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30)) +
  scale_color_viridis_d(end = 0.5, label = c(&amp;quot;Mundo&amp;quot;,&amp;quot;Brasil&amp;quot;)) +
  labs(title = &amp;quot;Percentual Médio de Mulheres nos Parlamentos Nacionais ao redor do mundo&amp;quot;,
       subtitle = &amp;quot;Brasil vs. Mundo&amp;quot;,
       color = NULL,
       y = &amp;quot;%&amp;quot;,
       x = &amp;quot;Ano&amp;quot;,
       caption = &amp;quot;Fonte: Banco Mundial - Elaborado por Edgar Cutar Junior&amp;quot;) +
  ylim(0,25) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-07-29-mulheres/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Lembra que existiam países muito ruins no último gráfico? Infelizmente vivemos em um deles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;women %&amp;gt;% 
  filter(date == &amp;quot;2018&amp;quot;) %&amp;gt;% 
  mutate(posicao = row_number(-value),
         percentil = ntile(value, 100),
         numero_de_paises = n()) %&amp;gt;% 
  filter(country == &amp;quot;Brazil&amp;quot;) %&amp;gt;% 
  select(country, posicao, percentil, numero_de_paises, value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   country posicao percentil numero_de_paises value
## 1  Brazil     157        19              193  10.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O Brasil ocupa a 157ª posição de 193 países quando o assunto é a representatividade feminina nos parlamentos nacionais. Isso nos deixa no percentil 19, dentro do pior quartil.&lt;/p&gt;
&lt;p&gt;Não sei vocês, mas achei essa situação até pior do que eu achava que seria.&lt;/p&gt;
&lt;p&gt;Espero que isso leve todo mundo a refletir um pouco sobre o assunto.&lt;/p&gt;
&lt;p&gt;Até!&lt;/p&gt;
&lt;p&gt;EDIT: Resolvi plotar num mapa os dados de 2018…
Tive que fazer alguns ajustes com nomes que não batiam, mas ficou assim:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;) %&amp;gt;%
  mutate(region = case_when(region == &amp;quot;USA&amp;quot; ~ &amp;quot;United States&amp;quot;,
                            region == &amp;quot;Russia&amp;quot; ~ &amp;quot;Russian Federation&amp;quot;,
                            region == &amp;quot;Egypt&amp;quot; ~ &amp;quot;Egypt, Arab Rep.&amp;quot;,
                            region == &amp;quot;Venezuela&amp;quot; ~ &amp;quot;Venezuela, RB&amp;quot;,
                            region == &amp;quot;Democratic Republic of the Congo&amp;quot; ~ &amp;quot;Congo, Rep.&amp;quot;,
                            region == &amp;quot;Iran&amp;quot; ~ &amp;quot;Iran, Islamic Rep.&amp;quot;,
                            region == &amp;quot;Syria&amp;quot; ~ &amp;quot;Syrian Arab Republic&amp;quot;,
                            region == &amp;quot;Yemen&amp;quot; ~ &amp;quot;Yemen, Rep.&amp;quot;,
                            TRUE ~ region)) %&amp;gt;% 
  left_join(women %&amp;gt;%  filter(date == 2018), 
            by = c(&amp;quot;region&amp;quot; = &amp;quot;country&amp;quot;)) 

ggplot(world) +
  geom_polygon(aes(x = long, y = lat, group = group, fill = value)) +
  scale_fill_viridis_c(direction = -1) +
  coord_quickmap() +
  theme_minimal() +
  labs(x = NULL,
       y = NULL, 
       fill = &amp;quot;% de Mulheres no Parlamento Nacional&amp;quot;,
       caption = &amp;quot;Fonte: Banco Mundial - Elaborado por Edgar Cutar Junior&amp;quot;) +
  theme(legend.position = &amp;quot;bottom&amp;quot;,
        axis.text = element_blank()) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://edgarcutar.github.io/post/2019-07-29-mulheres/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sobre este blog e a #tidytuesday</title>
      <link>https://edgarcutar.github.io/post/2019-07-29-sobre/sobre-este-blog-e-a-tidytuesday/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://edgarcutar.github.io/post/2019-07-29-sobre/sobre-este-blog-e-a-tidytuesday/</guid>
      <description>


&lt;div id=&#34;sobre-o-blog&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Sobre o blog&lt;/h4&gt;
&lt;p&gt;Bom dia! Meu nome é Edgar Cutar Junior, eu sou engenheiro florestal e cada vez mais entusiasta do uso do R para análise de dados.&lt;/p&gt;
&lt;p&gt;Criei este blog inicialmente para participar da &lt;strong&gt;Tidy Tuesday&lt;/strong&gt;. E não só participar, mas de alguma forma contribuir também.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidy-tuesday&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Tidy Tuesday&lt;/h4&gt;
&lt;p&gt;Desde 2017, existe um movimento iniciado por &lt;a href=&#34;https://www.jessemaegan.com/&#34;&gt;Jesse Maegan&lt;/a&gt; chamado &lt;a href=&#34;https://www.jessemaegan.com/post/r4ds-the-next-iteration/&#34;&gt;R For Data Science Online Learning Community&lt;/a&gt;. O projeto todo gira em torno da comunidade (sempre vibrante) do R nas redes sociais, e como podemos utilizar dessas redes não só para nos comunicar como para nos ajudarmos uns aos outros.&lt;/p&gt;
&lt;p&gt;Um dos passos pra essa comunidade online se fortalecer é a &lt;a href=&#34;https://thomasmock.netlify.com/post/tidytuesday-a-weekly-social-data-project-in-r/&#34;&gt;Tidy Tuesday&lt;/a&gt;. E como isso funciona? Toda semana, na segunda feira, um banco de dados é postado no &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;GitHub do projeto&lt;/a&gt;. A ideia é que o banco de dados seja um conjunto de dados de alguma forma abrangente sobre um assunto interessante (já foram publicados desde dados dos laureados no prêmio Nobel até uma lista de vinhos com seus &lt;em&gt;ratings&lt;/em&gt; em sites especializados). Todos os dados já são organizados de forma a funcionar bem com o &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sabendo isso, a finalidade é pegar estes dados, manipular e gerar um único gráfico com uma informação retirada destes dados.&lt;/p&gt;
&lt;p&gt;Daí pra frente, é postar seu gráfico na terça feira (Tuesday!) com o código no &lt;a href=&#34;twitter.com/edgarcutar&#34;&gt;Twitter&lt;/a&gt; com a hashtag #tidytuesday e correr pro abraço! E, claro, parte da experiência é interagir com as outras pessoas que também participam da Tidy Tuesday.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;os-finalmentes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Os finalmentes&lt;/h4&gt;
&lt;p&gt;Já há tempos venho acompanhando o projeto e agora resolvi participar. E ao invés de só participar, resolvi criar esse blog onde vou dar o passo a passo de cada gráfico, toda semana (espero).&lt;/p&gt;
&lt;p&gt;Além disso, eventualmente devo falar sobre alguma ferramenta ou base de dados que me chame a atenção.&lt;/p&gt;
&lt;p&gt;Vocês podem me encontrar no meu &lt;a href=&#34;e.cutar@gmail.com&#34;&gt;e-mail&lt;/a&gt;, &lt;a href=&#34;twitter.com/edgar_cutar&#34;&gt;twitter&lt;/a&gt; e no &lt;a href=&#34;instagram.com/edgarcutar&#34;&gt;Instagram&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bem vindos!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
